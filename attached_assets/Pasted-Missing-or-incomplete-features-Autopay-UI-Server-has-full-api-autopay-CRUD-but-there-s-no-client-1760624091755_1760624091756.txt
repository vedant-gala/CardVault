Missing or incomplete features
Autopay UI: Server has full /api/autopay CRUD, but there’s no client UI using it. No references to autopay in client/src.
Email parsing UX: Server provides /api/parse-emails with Gmail integration and error messaging; I don’t see a client control to trigger it besides a toast reference in Dashboard for “credit card related emails”. If a button exists, it’s not obvious; double-check if there’s a UI action wired to POST /api/parse-emails.
Card update/edit: There’s POST /api/cards, DELETE /api/cards/:id, and balance updates are internal-only. No PATCH /api/cards/:id route for editing card details; likewise no client edit UI.
Reward update/edit: There’s POST /api/rewards and progress is auto-updated, but no route to edit reward configs or deactivate; UI likely lacks editing/deactivation controls.
Transactions update/delete: Only GET and POST exist; no DELETE /api/transactions/:id or PATCH for corrections. Client seems to list and add only.
Notifications create endpoint usage: Server has POST /api/notifications, but client does not appear to offer manual creation; minor gap unless intentional.
Payments by bill endpoint: Storage has getPaymentsByBill, but there’s no route exposing it; only /api/payments and /api/payments/card/:cardId exist.
Credit score input: Server supports GET/POST /api/credit-scores and used in Dashboard; but I don’t see a client UI to add a score (only display/history). Likely missing an “Add/Refresh score” action.
WebSocket auth/identification: WS broadcasts notifications globally with no per-user scoping. Good enough if only authenticated clients connect from same app, but not multi-tenant safe. There’s no user filtering channel.
Gmail limitation handling in UI: Server returns specific scopeError for insufficient scopes; client doesn’t appear to surface a dedicated message or remediation beyond a generic toast.
Security hardening:
Notifications query joins on cards; notifications without cardId (e.g., general emails) might be excluded from list depending on leftJoin + where. Confirm UX for general notifications.
No rate limiting or CSRF protections.
DB migrations: Drizzle config exists, but initial table creation flow in README is minimal; ensure migrations are generated/applied. Not a feature, but operational gap.